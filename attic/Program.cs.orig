namespace Kiri.Cmd
{
    // https://github.com/migueldeicaza/gui.cs

    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net.Sockets;
    using System.Threading;

    class Program
    {
        static void Main(string[] args)
        {
            var term = new Terminal();
            term.Init();
            term.Add("Foo");
            term.Move(0, term.Rows - 1);
            term.Add("# ");
            term.Move(2, term.Rows - 1);
            
            while(true)
            {
                term.Refresh();
                var key = Console.ReadKey(true);
                term.Move(0, 0);
                term.Add(key.Key.ToString().PadRight(term.Cols));
                term.Move(2, term.Rows - 1);
            }
        }
    }

    /*
    class Program
    {
        const string nick = "Methbot";
        
        const string url = "https://github.com/basp//methbot";

        private static readonly LineBuffer buffer = new LineBuffer(100);

        private static readonly object bufferLock = new object();

        private static readonly object writerLock = new object();

        static void Update()
        {
            var lines = buffer.Last(10).ToArray();
            var offset = Console.WindowHeight - 2;

            Console.Clear();
            for (var i = 0; i < 10; i++)
            {
                if (i >= lines.Length) break;
                Console.SetCursorPosition(0, offset - i);
                Console.WriteLine(lines[i]);
            }

            Console.SetCursorPosition(0, Console.WindowHeight - 1);
            Console.Write("# ");
        }

        static void Add(string line)
        {
            lock (bufferLock)
            {
                buffer.Add(line);
                Update();
            }
        }

        static void Pong(StreamWriter writer, string ident)
        {
            Send(writer, $"PONG :{ident}");
        }

        static string ParsePing(string ping)
        {
            var chunks = ping.Split(':').Select(x => x.Trim());
            return chunks.Skip(1).First();
        }

        static void StartReading(StreamWriter writer, StreamReader reader)
        {
            while (true)
            {
                var line = reader.ReadLine();
                if (string.IsNullOrWhiteSpace(line))
                {
                    break;
                }

                Add($"< {line}");

                if (line.StartsWith("PING"))
                {
                    var ident = ParsePing(line);
                    Pong(writer, ident);
                }
            }
        }

        static void Send(StreamWriter writer, string data)
        {
            Add($"> {data}");
            lock (writerLock)
            {
                writer.WriteLine(data);
                writer.Flush();
            }
        }

        static void Main(string[] args)
        {
            const string hostname = "irc.freenode.net";
            const int port = 6667;

            using (var client = new TcpClient(hostname, port))
            using (var stream = client.GetStream())
            using (var writer = new StreamWriter(stream))
            using (var reader = new StreamReader(stream))
            {
                var t = new Thread(() => StartReading(writer, reader));
                t.Start();

                Send(writer, $"NICK {nick}");
                Send(writer, $"USER {nick} 8 * :{url}");

                while (true)
                {
                    var cmd = Console.ReadLine();
                    Send(writer, cmd);
                }
            }
        }
    }
    */
}
